# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import kmeans_pb2 as kmeans__pb2


class KMeansStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Run = channel.unary_unary(
                '/kmeans.KMeans/Run',
                request_serializer=kmeans__pb2.MasterInput.SerializeToString,
                response_deserializer=kmeans__pb2.CentroidCompilationOutput.FromString,
                )
        self.Map = channel.unary_unary(
                '/kmeans.KMeans/Map',
                request_serializer=kmeans__pb2.MapInput.SerializeToString,
                response_deserializer=kmeans__pb2.MapOutput.FromString,
                )
        self.Partition = channel.unary_unary(
                '/kmeans.KMeans/Partition',
                request_serializer=kmeans__pb2.PartitionInput.SerializeToString,
                response_deserializer=kmeans__pb2.PartitionOutput.FromString,
                )
        self.Reduce = channel.unary_unary(
                '/kmeans.KMeans/Reduce',
                request_serializer=kmeans__pb2.ReduceInput.SerializeToString,
                response_deserializer=kmeans__pb2.ReduceOutput.FromString,
                )
        self.CompileCentroids = channel.unary_unary(
                '/kmeans.KMeans/CompileCentroids',
                request_serializer=kmeans__pb2.CentroidCompilationInput.SerializeToString,
                response_deserializer=kmeans__pb2.CentroidCompilationOutput.FromString,
                )


class KMeansServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Map(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Partition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompileCentroids(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KMeansServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Run': grpc.unary_unary_rpc_method_handler(
                    servicer.Run,
                    request_deserializer=kmeans__pb2.MasterInput.FromString,
                    response_serializer=kmeans__pb2.CentroidCompilationOutput.SerializeToString,
            ),
            'Map': grpc.unary_unary_rpc_method_handler(
                    servicer.Map,
                    request_deserializer=kmeans__pb2.MapInput.FromString,
                    response_serializer=kmeans__pb2.MapOutput.SerializeToString,
            ),
            'Partition': grpc.unary_unary_rpc_method_handler(
                    servicer.Partition,
                    request_deserializer=kmeans__pb2.PartitionInput.FromString,
                    response_serializer=kmeans__pb2.PartitionOutput.SerializeToString,
            ),
            'Reduce': grpc.unary_unary_rpc_method_handler(
                    servicer.Reduce,
                    request_deserializer=kmeans__pb2.ReduceInput.FromString,
                    response_serializer=kmeans__pb2.ReduceOutput.SerializeToString,
            ),
            'CompileCentroids': grpc.unary_unary_rpc_method_handler(
                    servicer.CompileCentroids,
                    request_deserializer=kmeans__pb2.CentroidCompilationInput.FromString,
                    response_serializer=kmeans__pb2.CentroidCompilationOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kmeans.KMeans', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KMeans(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeans/Run',
            kmeans__pb2.MasterInput.SerializeToString,
            kmeans__pb2.CentroidCompilationOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Map(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeans/Map',
            kmeans__pb2.MapInput.SerializeToString,
            kmeans__pb2.MapOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Partition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeans/Partition',
            kmeans__pb2.PartitionInput.SerializeToString,
            kmeans__pb2.PartitionOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeans/Reduce',
            kmeans__pb2.ReduceInput.SerializeToString,
            kmeans__pb2.ReduceOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompileCentroids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeans/CompileCentroids',
            kmeans__pb2.CentroidCompilationInput.SerializeToString,
            kmeans__pb2.CentroidCompilationOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
